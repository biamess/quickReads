{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","initialReads","displayName","url","timeStamp","Date","isFavorite","isImportant","isComplete","now","state","reads","onAddNewRead","bind","onDeleteRead","onCompleteRead","onFaveButtonPress","onImportantButtonPress","updateFlair","this","setState","initialized","index","slice","concat","updatedReads","sort","read1","read2","propertyName","className","Logo","animate","length","class","React","Component","ReadList","filterActive","filterCompleted","filterFavorites","filterImportant","onViewActivePress","onViewCompletedPress","onClearFiltersPress","onFilterFavoritesPress","onFilterImportantPress","read","readsData","map","item","key","readIndex","preparedReads","viewAllStatuses","filteredReads","activeReads","completedReads","filter","favoriteFilter","importantFilter","createReads","Filters","Read","handleDeleteRead","handleCompleteRead","handleFaveButtonPress","handleImportantButtonPress","href","target","buttonClass","tooltip","onFlairButtonPress","iconName","type","onClick","ReadTimeStamp","displayText","minsAge","mins","Math","floor","hours","days","getDisplayText","ReadInput","handleSubmit","handleUrlInput","handleDisplayNameInput","event","preventDefault","value","id","onSubmit","placeholder","onChange","FlairButton","handleClick","FilterButton","uniqueKey","isActive","clickHandler","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.8b817ec5.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\n//quickReads App\nclass App extends React.Component {\n    constructor(props) {\n        super(props);\n\n        // todo: remove\n        // ********** FOR TESTING ONLY ***********\n        const useTestData = true;\n        const testData = [\n            { displayName: \"React\", url: \"https://reactjs.org/\", timeStamp: new Date(2020, 2, 3, 20, 0, 8, 0), isFavorite: false, isImportant: true, isComplete: false },\n            { displayName: \"Css Facts\", url: \"https://www.sitepoint.com/12-little-known-css-facts/\", timeStamp: new Date(2020, 0, 3, 18, 0, 0, 0), isFavorite: true, isImportant: false, isComplete: false },\n            { displayName: \"Area under curve\", url: \"https://www.youtube.com/watch?v=OaCVdzr3MjM\", timeStamp: new Date(2020, 0, 29, 20, 0, 8, 0), isFavorite: false, isImportant: false, isComplete: false },\n            { displayName: \"ColorPicker\", url: \"https://htmlcolorcodes.com/color-picker/\", timeStamp: Date.now(), isFavorite: false, isImportant: false, isComplete: true },\n        ];\n        const initialReads = useTestData ? testData : [];\n        // *****************************************\n\n        this.state = {\n            reads: initialReads\n        };\n\n        this.onAddNewRead = this.onAddNewRead.bind(this);\n        this.onDeleteRead = this.onDeleteRead.bind(this);\n        this.onCompleteRead = this.onCompleteRead.bind(this);\n        this.onFaveButtonPress = this.onFaveButtonPress.bind(this);\n        this.onImportantButtonPress = this.onImportantButtonPress.bind(this);\n        this.updateFlair = this.updateFlair.bind(this);\n    }\n\n    // Add a new read with given url and displayName\n    onAddNewRead(url, displayName) {\n        this.setState((state) => ({ initialized: true, reads: [{ displayName: displayName, url: url, timeStamp: new Date(), isFavorite: false, isImportant: false, isComplete: false }, ...state.reads] }));\n    }\n\n    // Delete the read at index\n    onDeleteRead(index) {\n        this.setState((state) => ({ reads: state.reads.slice(0, index).concat(state.reads.slice(index + 1)) }));\n    }\n\n    // Mark the read at index as completed\n    onCompleteRead(index) {\n        this.setState((state) => {\n            const updatedReads = [...state.reads];\n            updatedReads[index].timeStamp = new Date();\n            updatedReads[index].isComplete = true;\n            updatedReads.sort((read1, read2) => read2.timeStamp - read1.timeStamp);\n            return { reads: updatedReads };\n        });\n    }\n\n    // Update \"favorite\" status of the read at index\n    onFaveButtonPress(index) {\n        this.updateFlair(index, \"isFavorite\");\n    }\n\n    // Update \"important\" status of the read at index\n    onImportantButtonPress(index) {\n        this.updateFlair(index, \"isImportant\");\n    }\n\n    // Update the status of the specified \"flair\" property of the read at index\n    updateFlair(index, propertyName) {\n        this.setState((state) => {\n            const updatedReads = [...state.reads];\n            updatedReads[index][propertyName] = !updatedReads[index][propertyName];\n            return { reads: updatedReads };\n        });\n    }\n\n    // Render the full app\n    render() {\n        return (\n            <div className=\"appContainer\">\n                <div className=\"toolbar\">\n                    <Logo />\n                    <ReadInput animate={this.state.reads.length == 0} onAddNewRead={this.onAddNewRead} />\n                </div>\n\n                {/*Display either a welcome message or filters and the list of reads depending on whether there is any data to display*/}\n                {this.state.reads.length == 0 ?\n                    <div class=\"message\">\n                        <p> Welcome to <span class=\"logoSmall\">quickReads</span>, a tool to keep track of articles, tutorials, and other webpages that you'd like to visit later!</p>\n                        <p> <span class=\"logoSmall\">Reads</span> that you have saved will appear here. </p>\n                        <p> Add a new <span class=\"logoSmall\">read</span> above to get started!</p>\n                    </div> :\n                    <ReadList onDeleteRead={this.onDeleteRead} onCompleteRead={this.onCompleteRead} onFaveButtonPress={this.onFaveButtonPress} onImportantButtonPress={this.onImportantButtonPress} reads={this.state.reads} />\n                }\n            </div>);\n    }\n}\n\n// Component representing a list of Read items\nclass ReadList extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            filterActive: false,\n            filterCompleted: false,\n            filterFavorites: false,\n            filterImportant: false\n        };\n\n        this.onViewActivePress = this.onViewActivePress.bind(this);\n        this.onViewCompletedPress = this.onViewCompletedPress.bind(this);\n        this.onClearFiltersPress = this.onClearFiltersPress.bind(this);\n        this.onFilterFavoritesPress = this.onFilterFavoritesPress.bind(this);\n        this.onFilterImportantPress = this.onFilterImportantPress.bind(this);\n    }\n\n    // Handle user pressing the \"View Active\" filter\n    onViewActivePress() {\n        this.setState((state) => ({ filterActive: !state.filterActive }));\n    }\n\n    // Handle user pressing the \"View Completed\" filter\n    onViewCompletedPress() {\n        this.setState((state) => ({ filterCompleted: !state.filterCompleted }));\n    }\n\n    // Handle user pressing the \"View all\" filter\n    onClearFiltersPress() {\n        this.setState({\n            filterCompleted: false,\n            filterActive: false,\n            filterFavorites: false,\n            filterImportant: false\n        });\n    }\n\n    // Handle user pressing the favorites filter\n    onFilterFavoritesPress() {\n        this.setState((state) => ({ filterFavorites: !state.filterFavorites }));\n    }\n\n    // Handle user pressing the important filter\n    onFilterImportantPress() {\n        this.setState((state) => ({ filterImportant: !state.filterImportant }));\n    }\n\n    // Filter function for identifying important reads\n    importantFilter(read) {\n        return read.isImportant;\n    }\n\n    // Filter function for identifying favorite reads\n    favoriteFilter(read) {\n        return read.isFavorite;\n    }\n\n    // Create a list of Read components from a list of reads data\n    createReads(readsData) {\n        return readsData.map(\n            (item) => <Read key={\"Read\" + item.readIndex} readIndex={item.readIndex} displayName={item.displayName} url={item.url} timeStamp={item.timeStamp} isImportant={item.isImportant} isFavorite={item.isFavorite} isComplete={item.isComplete} onDeleteRead={this.props.onDeleteRead} onCompleteRead={this.props.onCompleteRead} onFaveButtonPress={this.props.onFaveButtonPress} onImportantButtonPress={this.props.onImportantButtonPress} />);\n    }\n\n    // Render the list of reads taking into account filter settings\n    render() {\n        // Keep track of each read's index in the full list of reads.\n        let preparedReads = this.props.reads.map((read, index) => ({ ...read, readIndex: index }));\n\n        // If both OR no filters are selected, display all.\n        const viewAllStatuses = this.state.filterActive == this.state.filterCompleted;\n        const viewAllFlair = !(this.state.filterFavorites || this.state.filterImportant);\n\n        let filteredReads = [];\n        let activeReads = [];\n        let completedReads = [];\n\n        // Filter the list of reads by \"flair\" based on applied filters\n        if (viewAllFlair) {\n            filteredReads = preparedReads;\n        }\n        else {\n            if (this.state.filterFavorites) {\n                filteredReads = filteredReads.concat(preparedReads.filter(this.favoriteFilter));\n            }\n            if (this.state.filterImportant) {\n                filteredReads = filteredReads.concat(preparedReads.filter(this.importantFilter));\n            }\n        }\n\n        // Create active and completed read components to display from the filtered list\n        if (viewAllStatuses || this.state.filterActive) {\n            activeReads = this.createReads(filteredReads.filter((read) => !read.isComplete));\n        }\n        if (viewAllStatuses || this.state.filterCompleted) {\n            completedReads = this.createReads(filteredReads.filter((read) => read.isComplete));\n        }\n\n        return (\n            <div className=\"readListContainer\">\n                <Filters onViewActivePress={this.onViewActivePress} filterActive={this.state.filterActive} onViewCompletedPress={this.onViewCompletedPress} filterCompleted={this.state.filterCompleted} onClearFiltersPress={this.onClearFiltersPress} onFilterFavoritesPress={this.onFilterFavoritesPress} onFilterImportantPress={this.onFilterImportantPress} filterFavorites={this.state.filterFavorites} filterImportant={this.state.filterImportant} />\n\n                {(activeReads.length == 0 && completedReads.length == 0) ?\n                    <p className=\"message\">Nothing to show here!</p> : null}\n\n                {activeReads.length > 0 ?\n                    <div className=\"readList activeReadList\">\n                        <h2>To Read:</h2>\n                        {activeReads}\n                    </div> : null}\n                {completedReads.length > 0 ?\n                    <div className=\"readList completedReadList\">\n                        <h2>Completed Reads:</h2>\n                        {completedReads}\n                    </div> : null\n                }\n            </div>\n        );\n    }\n}\n\n// Component for single entry in the list of articles to read\nclass Read extends React.Component {\n    constructor(props) {\n        super(props);\n        this.handleDeleteRead = this.handleDeleteRead.bind(this);\n        this.handleCompleteRead = this.handleCompleteRead.bind(this);\n        this.handleFaveButtonPress = this.handleFaveButtonPress.bind(this);\n        this.handleImportantButtonPress = this.handleImportantButtonPress.bind(this);\n    }\n\n    // Handle deleting the read\n    handleDeleteRead() {\n        this.props.onDeleteRead(this.props.readIndex);\n    }\n\n    // Handle marking a read as completed\n    handleCompleteRead() {\n        this.props.onCompleteRead(this.props.readIndex);\n    }\n\n    // Handle toggling the \"favorite\" status of the read\n    handleFaveButtonPress() {\n        this.props.onFaveButtonPress(this.props.readIndex);\n    }\n\n    // Handle toggling the \"important\" status of the read\n    handleImportantButtonPress() {\n        this.props.onImportantButtonPress(this.props.readIndex);\n    }\n\n    // Render the Read component\n    render() {\n        return (\n            <div className=\"readItem\">\n\n                <a href={this.props.url} target=\"_blank\">\n                    <div className=\"readInfo\">\n                        <p className=\"readName\" >{this.props.displayName || this.props.url}</p>\n                        <ReadTimeStamp timeStamp={this.props.timeStamp} />\n                    </div>\n                </a>\n                <div className=\"readAction\">\n                    <div className=\"readFlair\">\n                        <FlairButton key=\"faveButton\" buttonClass=\"favorite\" tooltip={this.props.isFavorite ? \"Unfavorite\" : \"Favorite\"} onFlairButtonPress={this.handleFaveButtonPress} iconName={this.props.isFavorite ? \"star\" : \"star_border\"} />\n                        <FlairButton key=\"importantButton\" buttonClass=\"important\" tooltip={this.props.isImportant ? \"Unimportant\" : \"Important\"} onFlairButtonPress={this.handleImportantButtonPress} iconName={this.props.isImportant ? \"bookmark\" : \"bookmark_border\"} />\n                    </div>\n\n                    <button className=\"readButton\" type=\"button\" onClick={this.handleDeleteRead}>\n                        <i className=\"buttonIcon material-icons\">clear</i>\n                        Delete\n          </button>\n\n                    {/* If the read is not yet completed, display a button to complete it*/}\n                    {!this.props.isComplete ?\n                        <button className=\"readButton\" type=\"button\" onClick={this.handleCompleteRead}>\n                            <i className=\"buttonIcon material-icons\">done</i>\n                            Complete\n            </button> :\n                        null}\n                </div>\n            </div>);\n    }\n}\n\n// Component representing the timestamp of a Read\nclass ReadTimeStamp extends React.Component {\n    constructor(props) {\n        super(props);\n    }\n\n    // Determine the display text depending on how long ago the read was added/completed\n    getDisplayText(timeStamp) {\n        let displayText;\n        const minsAge = (Date.now() - this.props.timeStamp) / 60000;\n\n        if (minsAge < 1) {\n            displayText = \"just now\";\n        }\n        else if (minsAge < 60) {\n            const mins = Math.floor(minsAge);\n            displayText = mins + (mins > 1 ? \" minutes\" : \" minute\") + \" ago\";\n        }\n        else if (minsAge < 1440) {\n            const hours = Math.floor(minsAge / 60);\n            displayText = hours + (hours > 1 ? \" hours\" : \" hour\") + \" ago\";\n        }\n        else {\n            const days = Math.floor((minsAge / 60) / 24);\n            displayText = days + (days > 1 ? \" days\" : \" day\") + \" ago\";\n        }\n        return displayText;\n    }\n\n    // Render the timestamp message\n    render() {\n        return (\n            <div className=\"timeStamp\">\n                <p>{this.getDisplayText(this.props.timeStamp)}</p>\n            </div>);\n    }\n}\n\n// Component for user input of new reads\nclass ReadInput extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            url: \"\",\n            displayName: \"\"\n        };\n        this.handleSubmit = this.handleSubmit.bind(this);\n        this.handleUrlInput = this.handleUrlInput.bind(this);\n        this.handleDisplayNameInput = this.handleDisplayNameInput.bind(this);\n    }\n\n    // Handle submitting the new read form\n    handleSubmit(event) {\n        event.preventDefault();\n\n        // Only add if url is provided\n        if (this.state.url) {\n            this.props.onAddNewRead(this.state.url, this.state.displayName);\n            this.setState({ url: \"\", displayName: \"\" });\n        }\n    }\n\n    // Update state based on user input in the controlled url field\n    handleUrlInput(event) {\n        this.setState({ url: event.target.value });\n    }\n\n    // Update state based on user input in the controlled display name field\n    handleDisplayNameInput(event) {\n        this.setState({ displayName: event.target.value });\n    }\n\n    // Render the \"add new\" input box\n    render() {\n        return (\n            <div id=\"addNewRead\" className={\"addNew\" + (this.props.animate ? \" shake\" : \"\")}>\n                <form onSubmit={this.handleSubmit}>\n                    <p>Add a new read</p>\n                    <input type=\"url\" id=\"urlInput\" placeholder=\"enter url\" value={this.state.url} onChange={this.handleUrlInput} />\n                    <input type=\"text\" placeholder=\"enter display name\" value={this.state.displayName} onChange={this.handleDisplayNameInput} />\n                    <input type=\"submit\" className=\"appButton\" value=\"Add\" />\n                </form>\n            </div>);\n    }\n}\n\n// Buttons which allow a user to mark a read with \"flair\", such as \"liked\" or \"important\"\nclass FlairButton extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.handleClick = this.handleClick.bind(this);\n    }\n\n    // Handle toggling the flair button.\n    // Behavior is provided by parent.\n    handleClick(event) {\n        this.props.onFlairButtonPress();\n    }\n\n    // Render the Flair button\n    render() {\n        return (\n            <div className=\"tooltipContainer flairButton\" onClick={this.handleClick}>\n                <div className=\"tooltip\">{this.props.tooltip}</div>\n                <i className={this.props.buttonClass + \" material-icons\"}>{this.props.iconName}</i>\n            </div>\n        );\n    }\n}\n\n// Filters to allow the user to adjust which reads are displayed\nfunction Filters(props) {\n\n    return (\n        <div>\n            <div className=\"filterGroup\">\n                <FilterButton uniqueKey=\"viewActive\" displayName=\"View Active\" isActive={props.filterActive} clickHandler={props.onViewActivePress} />\n\n                <FilterButton uniqueKey=\"viewCompleted\" displayName=\"View Completed\" isActive={props.filterCompleted} clickHandler={props.onViewCompletedPress} />\n            </div>\n\n            <div className=\"filterGroup\">\n                <FilterButton uniqueKey=\"filterFavorites\" displayName=\"Favorites\" isActive={props.filterFavorites} clickHandler={props.onFilterFavoritesPress} />\n\n                <FilterButton uniqueKey=\"filterImportant\" displayName=\"Important\" isActive={props.filterImportant} clickHandler={props.onFilterImportantPress} />\n            </div>\n\n            <div className=\"filterGroup\">\n                <FilterButton uniqueKey=\"clearFilters\" displayName=\"Clear Filters\" isActive={false} clickHandler={props.onClearFiltersPress} />\n            </div>\n        </div>\n    )\n}\n\n// Button for applying/removing a filter\nfunction FilterButton(props) {\n    return (\n        <button type=\"button\" key={props.uniqueKey} className={props.isActive ? \"activeFilterButton\" : \"filterButton\"} onClick={props.clickHandler}>{props.displayName}</button>\n    );\n}\n\n// Logo for the app\nfunction Logo(props) {\n    return (\n        <div className=\"appLogo\">\n            <h1>quickReads</h1>\n        </div>);\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}