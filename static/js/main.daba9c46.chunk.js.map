{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","initialReads","displayName","url","timeStamp","Date","isFavorite","isImportant","isComplete","now","state","reads","onAddNewRead","bind","onSaveEditRead","onDeleteRead","onCompleteRead","onFaveButtonPress","onImportantButtonPress","updateFlair","this","setState","initialized","index","updatedReads","slice","concat","sort","read1","read2","propertyName","className","Logo","NewRead","animate","length","onSave","class","React","Component","ReadList","filterActive","filterCompleted","filterFavorites","filterImportant","onViewActivePress","onViewCompletedPress","onClearFiltersPress","onFilterFavoritesPress","onFilterImportantPress","read","readsData","map","item","uniqueKey","readIndex","preparedReads","viewAllStatuses","filteredReads","activeReads","completedReads","filter","favoriteFilter","importantFilter","createReads","Filters","Read","editMode","handleCancelEdit","handleEdit","handleSaveEdit","handleDelete","handleComplete","handleFaveButtonPress","handleImportantButtonPress","newUrl","newDisplayName","EditRead","onCancel","key","href","target","rel","IconButton","buttonClass","iconClass","iconName","tooltip","onButtonPress","ReadTimeStamp","displayText","minsAge","mins","Math","floor","hours","days","getDisplayText","ReadInput","errorMessage","handleSubmit","handleUrlInput","handleDisplayNameInput","event","preventDefault","requireUrl","submitHandler","value","styles","onSubmit","label","type","id","placeholder","onChange","handleCancel","onClick","submitButtonName","FilterButton","isActive","clickHandler","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.daba9c46.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\n//quickReads App\nclass App extends React.Component {\n    constructor(props) {\n        super(props);\n\n        // todo: remove\n        // ********** FOR TESTING ONLY ***********\n        const useTestData = true;\n        const testData = [\n            { displayName: \"React\", url: \"https://reactjs.org/\", timeStamp: new Date(2020, 2, 3, 20, 0, 8, 0), isFavorite: false, isImportant: true, isComplete: false },\n            { displayName: \"Css Facts\", url: \"https://www.sitepoint.com/12-little-known-css-facts/\", timeStamp: new Date(2020, 0, 3, 18, 0, 0, 0), isFavorite: true, isImportant: false, isComplete: false },\n            { displayName: \"Area under curve\", url: \"https://www.youtube.com/watch?v=OaCVdzr3MjM\", timeStamp: new Date(2020, 0, 29, 20, 0, 8, 0), isFavorite: false, isImportant: false, isComplete: false },\n            { displayName: \"ColorPicker\", url: \"https://htmlcolorcodes.com/color-picker/\", timeStamp: Date.now(), isFavorite: false, isImportant: false, isComplete: true },\n        ];\n        const initialReads = useTestData ? testData : [];\n        // *****************************************\n\n        this.state = {\n            reads: initialReads\n        };\n\n        this.onAddNewRead = this.onAddNewRead.bind(this);\n        this.onSaveEditRead = this.onSaveEditRead.bind(this);\n        this.onDeleteRead = this.onDeleteRead.bind(this);\n        this.onCompleteRead = this.onCompleteRead.bind(this);\n        this.onFaveButtonPress = this.onFaveButtonPress.bind(this);\n        this.onImportantButtonPress = this.onImportantButtonPress.bind(this);\n        this.updateFlair = this.updateFlair.bind(this);\n    }\n\n    // Add a new read with given url and displayName\n    onAddNewRead(url, displayName) {\n        this.setState((state) => ({ initialized: true, reads: [{ displayName: displayName, url: url, timeStamp: new Date(), isFavorite: false, isImportant: false, isComplete: false }, ...state.reads] }));\n    }\n\n    // Update an edited read\n    onSaveEditRead(index, url, displayName) {\n        this.setState((state) => {\n            const updatedReads = [...state.reads];\n            updatedReads[index].url = url || updatedReads[index].url;\n            updatedReads[index].displayName = displayName || updatedReads[index].displayName;\n            return { reads: updatedReads };\n        });\n    }\n\n    // Delete the read at index\n    onDeleteRead(index) {\n        this.setState((state) => ({ reads: state.reads.slice(0, index).concat(state.reads.slice(index + 1)) }));\n    }\n\n    // Mark the read at index as completed\n    onCompleteRead(index) {\n        this.setState((state) => {\n            const updatedReads = [...state.reads];\n            updatedReads[index].timeStamp = new Date();\n            updatedReads[index].isComplete = true;\n            updatedReads.sort((read1, read2) => read2.timeStamp - read1.timeStamp);\n            return { reads: updatedReads };\n        });\n    }\n\n    // Update \"favorite\" status of the read at index\n    onFaveButtonPress(index) {\n        this.updateFlair(index, \"isFavorite\");\n    }\n\n    // Update \"important\" status of the read at index\n    onImportantButtonPress(index) {\n        this.updateFlair(index, \"isImportant\");\n    }\n\n    // Update the status of the specified \"flair\" property of the read at index\n    updateFlair(index, propertyName) {\n        this.setState((state) => {\n            const updatedReads = [...state.reads];\n            updatedReads[index][propertyName] = !updatedReads[index][propertyName];\n            return { reads: updatedReads };\n        });\n    }\n\n    // Render the full app\n    render() {\n        return (\n            <div className=\"appContainer\">\n                <div className=\"toolbar\">\n                    <Logo />\n                    <NewRead animate={this.state.reads.length === 0} onSave={this.onAddNewRead} />\n                </div>\n\n                {/*Display either a welcome message or filters and the list of reads depending on whether there is any data to display*/}\n                {this.state.reads.length === 0 ?\n                    <div class=\"message\">\n                        <p> Welcome to <span class=\"logoSmall\">quickReads</span>, a tool to keep track of articles, tutorials, and other webpages that you'd like to visit later!</p>\n                        <p> <span class=\"logoSmall\">Reads</span> that you have saved will appear here. </p>\n                        <p> Add a new <span class=\"logoSmall\">read</span> above to get started!</p>\n                    </div> :\n                    <ReadList onSaveEditRead={this.onSaveEditRead} onDeleteRead={this.onDeleteRead} onCompleteRead={this.onCompleteRead} onFaveButtonPress={this.onFaveButtonPress} onImportantButtonPress={this.onImportantButtonPress} reads={this.state.reads} />\n                }\n            </div>);\n    }\n}\n\n// Component representing a list of Read items\nclass ReadList extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            filterActive: false,\n            filterCompleted: false,\n            filterFavorites: false,\n            filterImportant: false\n        };\n\n        this.onViewActivePress = this.onViewActivePress.bind(this);\n        this.onViewCompletedPress = this.onViewCompletedPress.bind(this);\n        this.onClearFiltersPress = this.onClearFiltersPress.bind(this);\n        this.onFilterFavoritesPress = this.onFilterFavoritesPress.bind(this);\n        this.onFilterImportantPress = this.onFilterImportantPress.bind(this);\n    }\n\n    // Handle user pressing the \"View Active\" filter\n    onViewActivePress() {\n        this.setState((state) => ({ filterActive: !state.filterActive }));\n    }\n\n    // Handle user pressing the \"View Completed\" filter\n    onViewCompletedPress() {\n        this.setState((state) => ({ filterCompleted: !state.filterCompleted }));\n    }\n\n    // Handle user pressing the \"View all\" filter\n    onClearFiltersPress() {\n        this.setState({\n            filterCompleted: false,\n            filterActive: false,\n            filterFavorites: false,\n            filterImportant: false\n        });\n    }\n\n    // Handle user pressing the favorites filter\n    onFilterFavoritesPress() {\n        this.setState((state) => ({ filterFavorites: !state.filterFavorites }));\n    }\n\n    // Handle user pressing the important filter\n    onFilterImportantPress() {\n        this.setState((state) => ({ filterImportant: !state.filterImportant }));\n    }\n\n    // Filter function for identifying important reads\n    importantFilter(read) {\n        return read.isImportant;\n    }\n\n    // Filter function for identifying favorite reads\n    favoriteFilter(read) {\n        return read.isFavorite;\n    }\n\n    // Create a list of Read components from a list of reads data\n    createReads(readsData) {\n        return readsData.map(\n            (item) => <Read uniqueKey={\"Read\" + item.readIndex} read={item} onSaveEditRead={this.props.onSaveEditRead} onDeleteRead={this.props.onDeleteRead} onCompleteRead={this.props.onCompleteRead} onFaveButtonPress={this.props.onFaveButtonPress} onImportantButtonPress={this.props.onImportantButtonPress} />);\n    }\n\n    // Render the list of reads taking into account filter settings\n    render() {\n        // Keep track of each read's index in the full list of reads.\n        let preparedReads = this.props.reads.map((read, index) => ({ ...read, readIndex: index }));\n\n        // If both OR no filters are selected, display all.\n        const viewAllStatuses = this.state.filterActive === this.state.filterCompleted;\n        const viewAllFlair = !(this.state.filterFavorites || this.state.filterImportant);\n\n        let filteredReads = [];\n        let activeReads = [];\n        let completedReads = [];\n\n        // Filter the list of reads by \"flair\" based on applied filters\n        if (viewAllFlair) {\n            filteredReads = preparedReads;\n        }\n        else {\n            if (this.state.filterFavorites) {\n                filteredReads = filteredReads.concat(preparedReads.filter(this.favoriteFilter));\n            }\n            if (this.state.filterImportant) {\n                filteredReads = filteredReads.concat(preparedReads.filter(this.importantFilter));\n            }\n        }\n\n        // Create active and completed read components to display from the filtered list\n        if (viewAllStatuses || this.state.filterActive) {\n            activeReads = this.createReads(filteredReads.filter((read) => !read.isComplete));\n        }\n        if (viewAllStatuses || this.state.filterCompleted) {\n            completedReads = this.createReads(filteredReads.filter((read) => read.isComplete));\n        }\n\n        return (\n            <div className=\"readListContainer\">\n                <Filters onViewActivePress={this.onViewActivePress} filterActive={this.state.filterActive} onViewCompletedPress={this.onViewCompletedPress} filterCompleted={this.state.filterCompleted} onClearFiltersPress={this.onClearFiltersPress} onFilterFavoritesPress={this.onFilterFavoritesPress} onFilterImportantPress={this.onFilterImportantPress} filterFavorites={this.state.filterFavorites} filterImportant={this.state.filterImportant} />\n\n                {(activeReads.length === 0 && completedReads.length === 0) ?\n                    <p className=\"message\">Nothing to show here!</p> : null}\n\n                {activeReads.length > 0 ?\n                    <div className=\"readList activeReadList\">\n                        <h2>To Read:</h2>\n                        {activeReads}\n                    </div> : null}\n                {completedReads.length > 0 ?\n                    <div className=\"readList completedReadList\">\n                        <h2>Completed Reads:</h2>\n                        {completedReads}\n                    </div> : null\n                }\n            </div>\n        );\n    }\n}\n\n// Component for single entry in the list of articles to read\nclass Read extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            editMode: false\r\n        };\n\n        this.handleCancelEdit = this.handleCancelEdit.bind(this);\n        this.handleEdit = this.handleEdit.bind(this);\n        this.handleSaveEdit = this.handleSaveEdit.bind(this);\n        this.handleDelete = this.handleDelete.bind(this);\n        this.handleComplete = this.handleComplete.bind(this);\n        this.handleFaveButtonPress = this.handleFaveButtonPress.bind(this);\n        this.handleImportantButtonPress = this.handleImportantButtonPress.bind(this);\n    }\n\n    // Handle saving edits to the read\n    handleSaveEdit(newUrl, newDisplayName) {\n        this.props.onSaveEditRead(this.props.read.readIndex, newUrl, newDisplayName);\n        this.setState({ editMode: false });\n    }\n\n    // Handle cancelling an edit\n    handleCancelEdit() {\n        this.setState({ editMode: false });\r\n    }\n\n    // Handle editing a read\n    handleEdit() {\n        this.setState({ editMode: true });\r\n    }\n\n    // Handle deleting the read\n    handleDelete() {\n        this.props.onDeleteRead(this.props.read.readIndex);\n    }\n\n    // Handle marking a read as completed\n    handleComplete() {\n        this.props.onCompleteRead(this.props.read.readIndex);\n    }\n\n    // Handle toggling the \"favorite\" status of the read\n    handleFaveButtonPress() {\n        this.props.onFaveButtonPress(this.props.read.readIndex);\n    }\n\n    // Handle toggling the \"important\" status of the read\n    handleImportantButtonPress() {\n        this.props.onImportantButtonPress(this.props.read.readIndex);\n    }\n\n    // Render the Read component\n    render() {\n        return (\n            <div className=\"readItemContainer\">\n                {/* Display the edit popup if in edit mode */}\n                {\n                    this.state.editMode ?\n                        <EditRead displayName={this.props.read.displayName} url={this.props.read.url} onSave={this.handleSaveEdit} onCancel={this.handleCancelEdit} /> :\n                        null\n                }\n            <div key={this.props.uniqueKey} className={\"readItem\" + (this.state.editMode ? \" editMode\" : \"\")}>\n                <a href={this.props.read.url} target=\"_blank\" rel=\"noopener noreferrer\" >\n                    <div className=\"readInfo\">\n                        <p className=\"readName\" >{this.props.read.displayName || this.props.read.url}</p>\n                        <ReadTimeStamp timeStamp={this.props.read.timeStamp} />\n                    </div>\n                </a>\n                <div className=\"readAction\">\n                    <div className=\"readFlair\">\n                        <IconButton buttonClass=\"flairButton\" iconClass=\"favorite\" iconName={this.props.read.isFavorite ? \"star\" : \"star_border\"} tooltip={this.props.read.isFavorite ? \"Unfavorite\" : \"Favorite\"} onButtonPress={this.handleFaveButtonPress} />\n                        <IconButton buttonClass=\"flairButton\" iconClass=\"important\" iconName={this.props.read.isImportant ? \"bookmark\" : \"bookmark_border\"} tooltip={this.props.read.isImportant ? \"Make not important\" : \"Make Important\"} onButtonPress={this.handleImportantButtonPress} />\n                    </div>\n\n                    <IconButton buttonClass=\"readButton\" iconClass=\"buttonIcon\" iconName=\"clear\" tooltip=\"Delete\" onButtonPress={this.handleDelete} />\n                    <IconButton buttonClass=\"readButton\" iconClass=\"buttonIcon\" iconName=\"edit\" tooltip=\"Edit\" onButtonPress={this.handleEdit} />\n                    {/* If the read is not yet completed, display a button to complete it*/}\n                    {\n                        !this.props.read.isComplete ?\n                        <IconButton buttonClass=\"readButton\" iconClass=\"buttonIcon\" iconName=\"done\" tooltip=\"Done\" onButtonPress={this.handleComplete} /> :\n                            null\n                    }\n                </div>\n                </div>\n                </div>);\n    }\n}\n\n// Component representing the timestamp of a Read\nclass ReadTimeStamp extends React.Component {\n    constructor(props) {\n        super(props);\n    }\n\n    // Determine the display text depending on how long ago the read was added/completed\n    getDisplayText(timeStamp) {\n        let displayText;\n        const minsAge = (Date.now() - this.props.timeStamp) / 60000;\n\n        if (minsAge < 1) {\n            displayText = \"just now\";\n        }\n        else if (minsAge < 60) {\n            const mins = Math.floor(minsAge);\n            displayText = mins + (mins > 1 ? \" minutes\" : \" minute\") + \" ago\";\n        }\n        else if (minsAge < 1440) {\n            const hours = Math.floor(minsAge / 60);\n            displayText = hours + (hours > 1 ? \" hours\" : \" hour\") + \" ago\";\n        }\n        else {\n            const days = Math.floor((minsAge / 60) / 24);\n            displayText = days + (days > 1 ? \" days\" : \" day\") + \" ago\";\n        }\n        return displayText;\n    }\n\n    // Render the timestamp message\n    render() {\n        return (\n            <div className=\"timeStamp\">\n                <p>{this.getDisplayText(this.props.timeStamp)}</p>\n            </div>);\n    }\n}\n\n// Component for user input of reads\nclass ReadInput extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            url: this.props.url || \"\" ,\n            displayName: this.props.displayName || \"\",\n            errorMessage: \"\"\n        };\n        this.handleSubmit = this.handleSubmit.bind(this);\n        this.handleUrlInput = this.handleUrlInput.bind(this);\n        this.handleDisplayNameInput = this.handleDisplayNameInput.bind(this);\n    }\n\n    // Handle submitting the form\n    handleSubmit(event) {\n        event.preventDefault();\n\n        // Check if url is required and present\n        if (this.props.requireUrl && !this.state.url) {\n            this.setState({ errorMessage: \"Url is required\" });\r\n        }\n        else {\n            this.props.submitHandler(this.state.url, this.state.displayName);\n            this.setState({ url: \"\", displayName: \"\", errorMessage: \"\" });\r\n        }\n    }\n\n    // Update state based on user input in the controlled url field\n    handleUrlInput(event) {\n        this.setState({ url: event.target.value, errorMessage: \"\" });\n    }\n\n    // Update state based on user input in the controlled display name field\n    handleDisplayNameInput(event) {\n        this.setState({ displayName: event.target.value });\n    }\n\n    // Render the \"add new\" input box\n    render() {\n        return (\n            <div className={this.props.styles}>\n                <form onSubmit={this.handleSubmit}>\n                    <p>{this.props.label}</p>\n                    <input type=\"url\" id=\"urlInput\" placeholder=\"Enter url\" value={this.state.url} onChange={this.handleUrlInput} />\n                    <input type=\"text\" placeholder=\"Enter display name\" value={this.state.displayName} onChange={this.handleDisplayNameInput} />\n\n                    {/*Include a cancel button if a handler is provided*/}\n                    {\n                        this.props.handleCancel ?\n                        <button type=\"button\" className=\"appButton\" onClick={this.props.handleCancel}>Cancel</button> :\n                            null\n                    }\n                    <input type=\"submit\" className=\"appButton\" value={this.props.submitButtonName} />\n                    <p className={\"errorMessage\" + (this.state.errorMessage ? \"\" : \" hidden\" )}>{\"! \" + this.state.errorMessage }</p>\n                </form>\n            </div>\n        );\n    }\n}\n\n// Component for user input of a new read. \n// Returns a ReadInput component.\nfunction NewRead(props) {\n    return (\r\n        <ReadInput styles={\"newRead\" + (props.animate ? \" shake\" : \"\")} label=\"Add a new read\" requireUrl={true} submitButtonName=\"Add\" submitHandler={props.onSave} />\r\n        );\r\n}\n\n// Component for editing a read. \n// Returns a ReadInput component.\nfunction EditRead(props) {\n    return (\r\n        <div className=\"lock\">\r\n            <ReadInput styles=\"editRead\" label=\"Edit read\" submitButtonName=\"Save\" displayName={props.displayName} url={props.url} submitHandler={props.onSave} handleCancel={props.onCancel} />\r\n        </div>\r\n    );\r\n}\n\n// Button with tooltip displaying an icon.\nfunction IconButton(props) {\n        return (\n            <button type=\"button\" className={props.buttonClass + \" tooltipContainer\"} onClick={props.onButtonPress}>\n                <div className=\"tooltip\">{props.tooltip}</div>\n                <i className={props.iconClass + \" material-icons\"}>{props.iconName}</i>\n            </button>\n        );\n}\n\n// Filters to allow the user to adjust which reads are displayed\nfunction Filters(props) {\n\n    return (\n        <div>\n            <div className=\"filterGroup\">\n                <FilterButton uniqueKey=\"viewActive\" displayName=\"View Active\" isActive={props.filterActive} clickHandler={props.onViewActivePress} />\n\n                <FilterButton uniqueKey=\"viewCompleted\" displayName=\"View Completed\" isActive={props.filterCompleted} clickHandler={props.onViewCompletedPress} />\n            </div>\n\n            <div className=\"filterGroup\">\n                <FilterButton uniqueKey=\"filterFavorites\" displayName=\"Favorites\" isActive={props.filterFavorites} clickHandler={props.onFilterFavoritesPress} />\n\n                <FilterButton uniqueKey=\"filterImportant\" displayName=\"Important\" isActive={props.filterImportant} clickHandler={props.onFilterImportantPress} />\n            </div>\n\n            <div className=\"filterGroup\">\n                <FilterButton uniqueKey=\"clearFilters\" displayName=\"Clear Filters\" isActive={false} clickHandler={props.onClearFiltersPress} />\n            </div>\n        </div>\n    )\n}\n\n// Button for applying/removing a filter\nfunction FilterButton(props) {\n    return (\n        <button type=\"button\" key={props.uniqueKey} className={props.isActive ? \"activeFilterButton\" : \"filterButton\"} onClick={props.clickHandler}>{props.displayName}</button>\n    );\n}\n\n// Logo for the app\nfunction Logo(props) {\n    return (\n        <div className=\"appLogo\">\n            <h1>quickReads</h1>\n        </div>);\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}